"use strict";
var app= require('express')();
const bodyParser = require('body-parser');
const cors = require('cors');
var http= require('http').createServer(app);
const { TextAnalyticsClient, AzureKeyCredential } = require("@azure/ai-text-analytics");
const key = '568771e695244593b2d7be8f6a2209c6';
const endpoint = 'https://ag-textanalytics.cognitiveservices.azure.com/';
const textAnalyticsClient = new TextAnalyticsClient(endpoint,  new AzureKeyCredential(key));
app.use(cors());
const swaggerJsdoc= require('swagger-jsdoc');
const swaggerUi= require('swagger-ui-express');

const options = {
    swaggerDefinition: {
      info: {
        title: "Text Analysis API",
        version: "1.0.0",
        description: "Text Analysis API autogenerated by Swagger",
      },
      host: "localhost:3000",
      basePath: "/",
    },
    apis: ["./index.js"],
  };


const specs = swaggerJsdoc(options);
app.use("/docs", swaggerUi.serve, swaggerUi.setup(specs));

app.use(bodyParser.json());

async function sentimentAnalysis(client, sentimentInput){
    const sentimentResult = await client.analyzeSentiment(sentimentInput);
    var arr=[];
  
    sentimentResult.forEach(document => {
        let products= [];
        document.sentences.forEach(sentence => {
            var insidetmp={'Positive': `${sentence.confidenceScores.positive.toFixed(2)}`, 'Negative': `${sentence.confidenceScores.negative.toFixed(2)}`,'Neutral': `${sentence.confidenceScores.neutral.toFixed(2)}`};
            var tmp={'Sentence text': `${sentence.text}`, 'Sentence sentiment':`${sentence.sentiment}`, 'Sentences Scores': insidetmp};
            products.push(tmp);
           
        });
        var outtmp1={'Positive': `${document.confidenceScores.positive.toFixed(2)}`, 'Negative': `${document.confidenceScores.negative.toFixed(2)}`, 'Neutral': `${document.confidenceScores.neutral.toFixed(2)}`};
        var out={'ID': `${document.id}`, 'Document Sentiment': `${document.sentiment}`,'Document Scores': outtmp1,'Sentences Sentiment':`${document.sentences.length}`,products}
        arr.push(out);
    });
    return arr;
}

async function languageDetection(client,languageInputArray) {
    const languageResult = await client.detectLanguage(languageInputArray);
    let arr=[];
    languageResult.forEach(document => {
        let obj;
        obj={'ID': `${document.id}`, 'Primary Language': `${document.primaryLanguage.name}` };     
        arr.push(obj);
    });
    return arr;
}

async function keyPhraseExtraction(client, keyPhrasesInput ){
    let arr=[];
    const keyPhraseResult = await client.extractKeyPhrases(keyPhrasesInput);
    
    keyPhraseResult.forEach(document => {
        let obj;
        obj={'ID': `${document.id}`, 'Document Key Phrases': `${document.keyPhrases}` }
        arr.push(obj);
    });
    return arr;
}


/**
 * @swagger
 * definitions:
 *   sentiment Response:
 *         type: array
 *         items:
 *             type: object
 *             properties:
 *               ID:
 *                 type: string
 *               Document Sentiment:
 *                 type: string
 *               Document Score:
 *                 type: object
 *                 properties:
 *                   Positive:
 *                     type: number
 *                   Negative:
 *                     type: number
 *                   Neutral:
 *                     type: number 
 *               Sentences Sentiment:
 *                 type: number
 *               products:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     Sentence text:
 *                       type: string
 *                     Sentence sentiment:
 *                       type: string
 *                     Sentence Scores:
 *                       type: object
 *                       properties:
 *                         Positive:
 *                           type: number
 *                         Negative:
 *                           type: number
 *                         Neutral:
 *                           type: number 
 */

/**
 * @swagger
 * definitions:
 *   Request text:
 *     properties:
 *       textData:
 *         type: array
 *         items:
 *             type: string
 */

/**
 * @swagger
 * /getSentiment:
 *    post:
 *      description: Text Sentiments Analysis
 *      produces:
 *          - application/json
 *      responses:
 *        200:
 *          description: Successfully retrieved Sentiments of Text
 *          schema:
 *            $ref: '#/definitions/sentiment Response'
 *        400:
 *          description: Errors in input object
 *        500:
 *          description: Error while analyzing
 *      parameters:
 *          - name: Request text
 *            description: Request object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Request text'
 *
 */
app.post('/getSentiment', function(req,res){
    if( Object.keys(req.body).length === 0 ||  req.body.textData === undefined)  {
        res.status(400).send("Invalid Input");
        return;
      }
    
        var sentimentInput= req.body.textData;
        sentimentAnalysis(textAnalyticsClient,sentimentInput).then((data)=>{
            
        res.json(data);
        }).catch(err=>{
            console.log(err);
            res.status(500).send("Unable to analyze");
        });
});

/**
 * @swagger
 * definitions:
 *   language Response:
 *         type: array
 *         items:
 *             type: object
 *             properties:
 *               ID:
 *                 type: string
 *               Primary Language:
 *                 type: string
 */


/**
 * @swagger
 * /getLanguage:
 *    post:
 *      description: Text Language Analysis
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Successfully retrieved Language of Text
 *              schema:
 *                $ref: '#/definitions/language Response'
 *          400:
 *              description: Errors in input object
 *          500:
 *              description: Error while analyzing
 *      parameters:
 *          - name: Request text
 *            description: Request object containing text
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Request text'
 *
 */
app.post('/getLanguage', function(req,res){
    if( Object.keys(req.body).length === 0 ||  req.body.textData === undefined)  {
        res.status(400).send("Invalid Input");
        return;
      }
    var textlang= req.body.textData;
    
    languageDetection(textAnalyticsClient,textlang).then((data)=>{
        
    res.json(data);
    }).catch(err=>{
        console.log(err);
        res.status(500).send("Unable to analyze");
    });
});


/**
 * @swagger
 * definitions:
 *   keyPhraseResponse:
 *         type: array
 *         items:
 *             type: object
 *             properties:
 *               ID:
 *                 type: string
 *               Document Key Phrases:
 *                 type: string
 */


/**
 * @swagger
 * /getKeyPhrase:
 *    post:
 *      description: Text Key Phrases Analysis
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: Successfully retrieved Key Phrases from Text
 *              schema:
 *                $ref: '#/definitions/keyPhraseResponse'
 *          400:
 *              description: Errors in input object
 *          500:
 *              description: Error while analyzing
 *      parameters:
 *          - name: Request text
 *            description: Request object
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Request text'
 *
 */
app.post('/getKeyPhrase', function(req,res){
    if( Object.keys(req.body).length === 0 ||  req.body.textData === undefined)  {
        res.status(400).send("Invalid Input");
        return;
      }
    var keyPhrase= req.body.textData;
    
    keyPhraseExtraction(textAnalyticsClient,keyPhrase).then((data)=>{   
    res.json(data);
    }).catch(err=>{
        console.log(err);
        res.status(500).send("Unable to analyze");
    });
});

app.get('/',  function(req,res){
    
    let arr=[];
    arr.push({"url1":"url:3000/getSentiment"});
    arr.push({"url2":"url:3000/getLanguage"});
    arr.push({"url3":"url:3000/getKeyPhrase"});
    res.json(arr);
    
});

http.listen(3000, ()=>{
    console.log('listening on *:3000');
})